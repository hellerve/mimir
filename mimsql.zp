(module "mimsql"
  (export
    `("select"  ,select)
    `("where"   ,where)
    `("limit"   ,limit)
    `("order"   ,order)
    `("offset"  ,offset)
    `("having"  ,having)
    `("sub"     ,sub)
    `("select?" ,mimsql:select?)
    `("where?"  ,mimsql:where?)
    `("limit?"  ,mimsql:limit?)
    `("order?"  ,mimsql:order?)
    `("offset?" ,mimsql:offset?)
    `("having?" ,mimsql:having?)
    `("sub?"    ,mimsql:sub?))

  (loads "mimir/priv/mimsql-internal")

  (deatomize (compose cdr ->string))

  (stringify (lambda (v)
    (given v
      (string? ($ (++ "\"" % "\"")))
      (atom? deatomize)
      (else ->string))))

  (treat (lambda (value)
    (given value
      (mimsql:sub? cadr)
      (list? (curry reduce (lambda (acc v) (++ acc " " (stringify v))) " "))
      (else ($ (++ "=" (stringify %)))))))


  (select (lambda (names from . clauses)
    (let ((names (if (list? names) names (list names))))
      (mimsql:make-select (map stringify names) (stringify from) clauses))))

  (where (lambda constraints
    (let ((treated (|> constraints
                       make-hash
                       (curry hash:kv-map ($ `(,(stringify (car %))
                                               ,(treat (cadr %)))))
                       (curry map string:join))))
      (mimsql:make-where treated))))

  (limit (lambda (n)
    (mimsql:make-limit n)))

  (offset (lambda (n)
    (mimsql:make-offset n)))

  (order (lambda (name . method)
    (mimsql:make-order (stringify name)
                        (if (null? method)
                          ""
                          (++ " "
                              (|> method car stringify string:uppercase))))))

  (having (lambda constraints
    (let ((treated (|> constraints
                       (curry partition-all 4)
                       (curry map ($ (++ (stringify (car %))
                                         "(" (stringify (cadr %)) ")"
                                         (treat (cddr %))))))))
      (mimsql:make-having treated))))

  (sub (lambda (operator query)
    (mimsql:make-sub (stringify operator) query))))
