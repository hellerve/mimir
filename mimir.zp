(module "mimir"
  (export
    `("connect" ,mimir:connect)
    `("disconnect" ,mimir:disconnect)
    `("connect-from-config" ,connect-from-config)
    `("get-tables" ,mimir:get-tables)
    `("execute" ,mimir:execute)
    `("execute-mimsql" ,execute-mimsql)
    `("commit" ,mimir:commit)
    `("rollback" ,mimir:rollback)
    `("connection?" ,mimir:connection?)
    `("connection-info" ,mimir:connection-info)
    `("with-connection" ,with-connection))

  (loads "mimir/priv/internal")

  (execute-mimsql (lambda (conn query . values)
    "executes a query built with mimsql. Otherwise functionally equivalent
     to <fun>mimsql:execute</fun>.

     params:
      - conn: the connection
      - query: the mimsql query to run
      - options: optional argument: the values that should be interpolated
     complexity: same as <fun>mimsql:execute</fun>
     returns: the result set"
    (mimsql:execute conn (->string query) (if (null? options) [] (car options)))))

  (connect-from-config (lambda (conf-path)
    "creates a database connection from the configuration in the
     config file <par>conf-path</par>.

     params:
      - conf-path: the configuration path
     complexity: O(n) where n is the complexity of the configuration
     returns: a database connection object (opaque)"
    (let ((conf (car (parse conf-path))))
      (mimir:connect conf))))

  (with-connection (lambda (conf f)
    "executes the function <par>f</par> with a connection as
     specified in the configuration <par>conf</par>.

     <par>conf</par> can be both a path to a file (string) or
     a configuration object (hashmap).

     params:
      - conf: the configuration object (string|hashmap)
      - f: the function to call
    complexity: O(n) where n is the complexity of the configuration
    returns: the result of the function"
    (let* ((conn (given (hash-map? mimir:connect)
                        (string? connect-from-config)
                        (else
                          (error "connect must be either a hashmap or a string"))))
           (res (f conn)))
      (begin
        (mimir:commit conn)
        (mimir:disconnect conn)
        res)))))
